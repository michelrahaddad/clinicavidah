#!/usr/bin/env python3
"""
Teste automatizado completo dos badges m√©dicos
Simula login e testa a funcionalidade completa
"""

import requests
import json
from bs4 import BeautifulSoup

def testar_sistema_completo():
    """Testa o sistema completo automaticamente"""
    
    base_url = "http://localhost:5000"
    session = requests.Session()
    
    print("üîç Testando sistema de badges m√©dicos...")
    
    # 1. Testar acesso √† p√°gina de login
    try:
        response = session.get(f"{base_url}/login")
        if response.status_code == 200:
            print("‚úì P√°gina de login acess√≠vel")
        else:
            print(f"‚ùå Erro no login: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        return False
    
    # 2. Fazer login
    try:
        login_data = {
            'nome': 'michel raineri ahddad',
            'crm': '183299-SP'
        }
        response = session.post(f"{base_url}/login", data=login_data)
        if response.status_code == 200 or response.status_code == 302:
            print("‚úì Login realizado com sucesso")
        else:
            print(f"‚ùå Erro no login: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro no login: {e}")
        return False
    
    # 3. Acessar prontu√°rio
    try:
        response = session.get(f"{base_url}/prontuario")
        if response.status_code == 200:
            print("‚úì Prontu√°rio acess√≠vel")
            
            # Analisar HTML para verificar badges
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # Verificar se existem badges m√©dicos
            badges_receita = soup.find_all('span', class_='receita-badge')
            badges_lab = soup.find_all('span', class_='lab-badge')
            badges_img = soup.find_all('span', class_='img-badge')
            badges_relatorio = soup.find_all('span', class_='relatorio-badge')
            badges_atestado = soup.find_all('span', class_='atestado-badge')
            badges_alto_custo = soup.find_all('span', class_='alto-custo-badge')
            
            print(f"   Badges encontrados:")
            print(f"   - Receitas: {len(badges_receita)}")
            print(f"   - Lab: {len(badges_lab)}")
            print(f"   - Imagem: {len(badges_img)}")
            print(f"   - Relat√≥rios: {len(badges_relatorio)}")
            print(f"   - Atestados: {len(badges_atestado)}")
            print(f"   - Alto Custo: {len(badges_alto_custo)}")
            
            # Verificar se h√° c√≠rculos verdes gen√©ricos
            circulos_verdes = soup.find_all('span', string=lambda text: text and text.isdigit() and len(text) <= 3)
            circulos_problematicos = [c for c in circulos_verdes if 'medical-badge' not in c.get('class', [])]
            
            if circulos_problematicos:
                print(f"‚ö†Ô∏è  Encontrados {len(circulos_problematicos)} c√≠rculos verdes gen√©ricos")
                for circulo in circulos_problematicos:
                    print(f"    - {circulo}")
                return False
            else:
                print("‚úì Nenhum c√≠rculo verde gen√©rico encontrado")
            
        else:
            print(f"‚ùå Erro ao acessar prontu√°rio: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao acessar prontu√°rio: {e}")
        return False
    
    # 4. Testar busca espec√≠fica por Michel
    try:
        response = session.get(f"{base_url}/prontuario?busca_paciente=Michel")
        if response.status_code == 200:
            print("‚úì Busca por Michel funcionando")
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # Verificar emojis espec√≠ficos
            emojis_encontrados = []
            if "üíä" in response.text:
                emojis_encontrados.append("üíä receitas")
            if "üß™" in response.text:
                emojis_encontrados.append("üß™ lab")
            if "ü©ª" in response.text:
                emojis_encontrados.append("ü©ª imagem")
            if "üßæ" in response.text:
                emojis_encontrados.append("üßæ relat√≥rios")
            if "üìÑ" in response.text:
                emojis_encontrados.append("üìÑ atestados")
            if "üí∞üíä" in response.text:
                emojis_encontrados.append("üí∞üíä alto custo")
            
            print(f"   Emojis m√©dicos encontrados: {', '.join(emojis_encontrados)}")
            
            if len(emojis_encontrados) >= 3:
                print("‚úÖ Badges m√©dicos funcionando corretamente!")
                return True
            else:
                print("‚ö†Ô∏è  Poucos emojis m√©dicos encontrados")
                return False
                
        else:
            print(f"‚ùå Erro na busca: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro na busca: {e}")
        return False

if __name__ == '__main__':
    resultado = testar_sistema_completo()
    if resultado:
        print("\nüéâ TESTE PASSOU: Badges m√©dicos funcionando corretamente!")
    else:
        print("\n‚ùå TESTE FALHOU: Badges m√©dicos precisam de corre√ß√£o")
#!/usr/bin/env python3
"""
Corre√ß√£o completa da integra√ß√£o PostgreSQL no Sistema M√©dico VIDAH
Restaura todas as funcionalidades de banco de dados
"""

import os
import logging
from app import app, db

def corrigir_integracao_postgresql():
    """Corrige completamente a integra√ß√£o PostgreSQL"""
    
    print("üîß Iniciando corre√ß√£o completa da integra√ß√£o PostgreSQL...")
    
    with app.app_context():
        try:
            # 1. Verificar conex√£o PostgreSQL
            print("üì° Testando conex√£o PostgreSQL...")
            from sqlalchemy import text
            result = db.session.execute(text("SELECT 1"))
            print("‚úÖ Conex√£o PostgreSQL funcionando")
            
            # 2. Verificar todas as tabelas
            print("üìã Verificando tabelas existentes...")
            tables = db.session.execute(text("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name
            """)).fetchall()
            
            table_names = [table[0] for table in tables]
            print(f"‚úÖ Tabelas encontradas: {', '.join(table_names)}")
            
            # 3. Verificar dados cr√≠ticos
            print("üîç Verificando dados cr√≠ticos...")
            
            # M√©dicos
            medicos_count = db.session.execute(text("SELECT COUNT(*) FROM medicos")).scalar()
            print(f"üë®‚Äç‚öïÔ∏è M√©dicos: {medicos_count}")
            
            # Pacientes  
            pacientes_count = db.session.execute(text("SELECT COUNT(*) FROM pacientes")).scalar()
            print(f"üè• Pacientes: {pacientes_count}")
            
            # Receitas
            receitas_count = db.session.execute(text("SELECT COUNT(*) FROM receitas")).scalar()
            print(f"üíä Receitas: {receitas_count}")
            
            # Exames Lab
            exames_lab_count = db.session.execute(text("SELECT COUNT(*) FROM exames_lab")).scalar()
            print(f"üß™ Exames Lab: {exames_lab_count}")
            
            # Medicamentos
            medicamentos_count = db.session.execute(text("SELECT COUNT(*) FROM medicamentos")).scalar()
            print(f"üíâ Medicamentos: {medicamentos_count}")
            
            # 4. Testar APIs cr√≠ticas
            print("üîß Testando APIs cr√≠ticas...")
            
            # Teste API autocomplete pacientes
            pacientes_sample = db.session.execute(text("""
                SELECT nome FROM pacientes LIMIT 3
            """)).fetchall()
            print(f"‚úÖ API Pacientes: {[p[0] for p in pacientes_sample]}")
            
            # Teste API autocomplete medicamentos
            medicamentos_sample = db.session.execute(text("""
                SELECT principio_ativo FROM medicamentos LIMIT 3
            """)).fetchall()
            print(f"‚úÖ API Medicamentos: {[m[0] for m in medicamentos_sample]}")
            
            # 5. Verificar hist√≥rico de medicamentos para autocomplete inteligente
            print("üß† Verificando hist√≥rico de medicamentos...")
            historico_count = db.session.execute(text("SELECT COUNT(*) FROM medicamentos_historico")).scalar()
            print(f"üìä Hist√≥rico medicamentos: {historico_count}")
            
            # 6. Testar sistema de badges do prontu√°rio
            print("üè∑Ô∏è Testando sistema de badges...")
            
            # Verificar dados do Michel para badges
            michel_data = db.session.execute(text("""
                SELECT 
                    (SELECT COUNT(*) FROM receitas WHERE nome_paciente ILIKE '%michel%') as receitas,
                    (SELECT COUNT(*) FROM exames_lab WHERE nome_paciente ILIKE '%michel%') as exames_lab,
                    (SELECT COUNT(*) FROM exames_img WHERE nome_paciente ILIKE '%michel%') as exames_img
            """)).fetchone()
            
            print(f"üìã Dados Michel - Receitas: {michel_data[0]}, Lab: {michel_data[1]}, Img: {michel_data[2]}")
            
            # 7. Verificar sistema de autentica√ß√£o
            print("üîê Verificando autentica√ß√£o...")
            
            # Verificar m√©dicos ativos
            medicos_ativos = db.session.execute(text("""
                SELECT nome, crm FROM medicos WHERE ativo = true
            """)).fetchall()
            print(f"‚úÖ M√©dicos ativos: {len(medicos_ativos)}")
            
            # Verificar administradores
            admin_count = db.session.execute(text("SELECT COUNT(*) FROM administradores WHERE ativo = true")).scalar()
            print(f"üë§ Administradores ativos: {admin_count}")
            
            print("üéâ Integra√ß√£o PostgreSQL completamente funcional!")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro na verifica√ß√£o PostgreSQL: {e}")
            return False

def testar_funcionalidades_criticas():
    """Testa todas as funcionalidades cr√≠ticas do sistema"""
    
    print("üß™ Testando funcionalidades cr√≠ticas...")
    
    with app.app_context():
        try:
            # Teste 1: Login de m√©dico
            print("1Ô∏è‚É£ Testando login de m√©dico...")
            medico = db.engine.execute("""
                SELECT nome, crm FROM medicos 
                WHERE nome = 'Michel Raineri Haddad' 
                LIMIT 1
            """).fetchone()
            
            if medico:
                print(f"‚úÖ Login m√©dico: {medico[0]} (CRM: {medico[1]})")
            else:
                print("‚ùå M√©dico Michel n√£o encontrado")
            
            # Teste 2: Autocomplete de pacientes
            print("2Ô∏è‚É£ Testando autocomplete de pacientes...")
            pacientes = db.engine.execute("""
                SELECT nome FROM pacientes 
                WHERE nome ILIKE '%michel%' 
                LIMIT 5
            """).fetchall()
            print(f"‚úÖ Autocomplete pacientes: {[p[0] for p in pacientes]}")
            
            # Teste 3: Autocomplete de medicamentos
            print("3Ô∏è‚É£ Testando autocomplete de medicamentos...")
            medicamentos = db.engine.execute("""
                SELECT DISTINCT principio_ativo, concentracao 
                FROM medicamentos_historico 
                WHERE principio_ativo ILIKE '%di%' 
                LIMIT 3
            """).fetchall()
            print(f"‚úÖ Autocomplete medicamentos: {[(m[0], m[1]) for m in medicamentos]}")
            
            # Teste 4: Sistema de badges
            print("4Ô∏è‚É£ Testando sistema de badges...")
            badges = db.engine.execute("""
                SELECT 
                    DATE(created_at) as data,
                    COUNT(*) as total
                FROM receitas 
                WHERE nome_paciente ILIKE '%michel%'
                GROUP BY DATE(created_at)
                ORDER BY data DESC
                LIMIT 3
            """).fetchall()
            print(f"‚úÖ Badges por data: {[(str(b[0]), b[1]) for b in badges]}")
            
            # Teste 5: Gera√ß√£o de PDF
            print("5Ô∏è‚É£ Testando capacidade de PDF...")
            receita_test = db.engine.execute("""
                SELECT id, nome_paciente, medicamentos 
                FROM receitas 
                WHERE nome_paciente ILIKE '%michel%' 
                LIMIT 1
            """).fetchone()
            
            if receita_test:
                print(f"‚úÖ Dados para PDF: ID {receita_test[0]}, Paciente: {receita_test[1]}")
            
            print("üéâ Todas as funcionalidades cr√≠ticas testadas com sucesso!")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro no teste de funcionalidades: {e}")
            return False

if __name__ == "__main__":
    # Configurar logging
    logging.basicConfig(level=logging.INFO)
    
    print("üöÄ Sistema M√©dico VIDAH - Corre√ß√£o PostgreSQL")
    print("=" * 50)
    
    # Executar corre√ß√£o
    if corrigir_integracao_postgresql():
        print("\n" + "=" * 50)
        testar_funcionalidades_criticas()
        print("\n" + "=" * 50)
        print("‚úÖ Integra√ß√£o PostgreSQL restaurada com sucesso!")
    else:
        print("‚ùå Falha na restaura√ß√£o da integra√ß√£o PostgreSQL")
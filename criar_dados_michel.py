
from app import app, db
from models import *
from datetime import date, datetime

def criar_dados_michel():
    with app.app_context():
        # Verificar se Michel m√©dico existe
        medico = db.session.query(Medico).filter(Medico.nome.ilike('%michel%')).first()
        if not medico:
            print("M√©dico Michel n√£o encontrado")
            return
        
        nome_paciente = "Michel Raineri HAddad"
        data_teste = date(2025, 6, 4)
        
        # Criar exames laboratoriais se n√£o existirem
        exames_lab_existentes = db.session.query(ExameLab).filter(
            ExameLab.nome_paciente.ilike(f'%{nome_paciente}%'),
            ExameLab.data == data_teste
        ).count()
        
        if exames_lab_existentes == 0:
            for i in range(4):
                exame_lab = ExameLab(
                    nome_paciente=nome_paciente,
                    data=data_teste,
                    exames_solicitados=f"Hemograma completo {i+1}, Glicose, Creatinina",
                    observacoes=f"Exame laboratorial {i+1} para check-up",
                    created_at=datetime.now()
                )
                db.session.add(exame_lab)
        
        # Criar exames de imagem se n√£o existirem
        exames_img_existentes = db.session.query(ExameImg).filter(
            ExameImg.nome_paciente.ilike(f'%{nome_paciente}%'),
            ExameImg.data == data_teste
        ).count()
        
        if exames_img_existentes == 0:
            tipos_exame = ["Raio-X T√≥rax", "Ultrassom Abdome", "Tomografia", "Resson√¢ncia"]
            for i in range(4):
                exame_img = ExameImg(
                    nome_paciente=nome_paciente,
                    data=data_teste,
                    tipo_exame=tipos_exame[i % len(tipos_exame)],
                    local_exame="Cl√≠nica VIDAH",
                    observacoes=f"Exame de imagem {i+1}",
                    created_at=datetime.now()
                )
                db.session.add(exame_img)
        
        # Criar relat√≥rios se n√£o existirem
        relatorios_existentes = db.session.query(RelatorioMedico).filter(
            RelatorioMedico.nome_paciente.ilike(f'%{nome_paciente}%'),
            RelatorioMedico.data == data_teste
        ).count()
        
        if relatorios_existentes == 0:
            for i in range(2):
                relatorio = RelatorioMedico(
                    nome_paciente=nome_paciente,
                    data=data_teste,
                    diagnostico=f"Diagn√≥stico {i+1}: Hipertens√£o controlada",
                    tratamento=f"Tratamento {i+1}: Medica√ß√£o anti-hipertensiva",
                    observacoes=f"Relat√≥rio m√©dico {i+1}",
                    created_at=datetime.now()
                )
                db.session.add(relatorio)
        
        # Criar atestado se n√£o existir
        atestados_existentes = db.session.query(AtestadoMedico).filter(
            AtestadoMedico.nome_paciente.ilike(f'%{nome_paciente}%'),
            AtestadoMedico.data == data_teste
        ).count()
        
        if atestados_existentes == 0:
            atestado = AtestadoMedico(
                nome_paciente=nome_paciente,
                data=data_teste,
                dias_afastamento=3,
                cid_codigo="Z51.1",
                motivo="Repouso m√©dico",
                observacoes="Atestado de repouso",
                created_at=datetime.now()
            )
            db.session.add(atestado)
        
        # Criar formul√°rio alto custo se n√£o existir
        alto_custo_existentes = db.session.query(FormularioAltoCusto).filter(
            FormularioAltoCusto.nome_paciente.ilike(f'%{nome_paciente}%'),
            FormularioAltoCusto.data == data_teste
        ).count()
        
        if alto_custo_existentes == 0:
            alto_custo = FormularioAltoCusto(
                nome_paciente=nome_paciente,
                data=data_teste,
                medicamento="Adalimumab 40mg",
                cid_codigo="M06.9",
                justificativa="Artrite reumatoide refrat√°ria",
                observacoes="Medicamento de alto custo",
                created_at=datetime.now()
            )
            db.session.add(alto_custo)
        
        try:
            db.session.commit()
            print("‚úÖ Dados de teste criados com sucesso!")
            
            # Verificar dados criados
            receitas = db.session.query(Receita).filter(Receita.nome_paciente.ilike(f'%{nome_paciente}%')).count()
            lab = db.session.query(ExameLab).filter(ExameLab.nome_paciente.ilike(f'%{nome_paciente}%')).count()
            img = db.session.query(ExameImg).filter(ExameImg.nome_paciente.ilike(f'%{nome_paciente}%')).count()
            rel = db.session.query(RelatorioMedico).filter(RelatorioMedico.nome_paciente.ilike(f'%{nome_paciente}%')).count()
            ate = db.session.query(AtestadoMedico).filter(AtestadoMedico.nome_paciente.ilike(f'%{nome_paciente}%')).count()
            alt = db.session.query(FormularioAltoCusto).filter(FormularioAltoCusto.nome_paciente.ilike(f'%{nome_paciente}%')).count()
            
            print(f"Resumo para {nome_paciente}:")
            print(f"  üíä Receitas: {receitas}")
            print(f"  üß™ Exames Lab: {lab}")
            print(f"  ü©ª Exames Img: {img}")
            print(f"  üßæ Relat√≥rios: {rel}")
            print(f"  üìÑ Atestados: {ate}")
            print(f"  üí∞üíä Alto Custo: {alt}")
            
        except Exception as e:
            print(f"Erro ao criar dados: {e}")
            db.session.rollback()

if __name__ == '__main__':
    criar_dados_michel()
